// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMCenterTestApp.DAL;

#nullable disable

namespace SMCenterTestApp.Migrations
{
    [DbContext(typeof(MedicDBContext))]
    [Migration("20220913074712_UpdateContext")]
    partial class UpdateContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SMCenterTestApp.DAL.Cabinet", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cabinet", (string)null);
                });

            modelBuilder.Entity("SMCenterTestApp.DAL.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CabinetId")
                        .HasColumnType("int");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("SMCenterTestApp.DAL.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("SMCenterTestApp.DAL.Region", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("SMCenterTestApp.DAL.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Speciality", (string)null);
                });

            modelBuilder.Entity("SMCenterTestApp.DTO.PatientDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("PatientDTO");
                });

            modelBuilder.Entity("SMCenterTestApp.DTO.RegionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RegionDTO");
                });

            modelBuilder.Entity("SMCenterTestApp.DAL.Doctor", b =>
                {
                    b.HasOne("SMCenterTestApp.DAL.Cabinet", "Cabinet")
                        .WithMany("Doctors")
                        .HasForeignKey("CabinetId")
                        .IsRequired()
                        .HasConstraintName("FK__Doctor__CabinetI__60A75C0F");

                    b.HasOne("SMCenterTestApp.DAL.Region", "Region")
                        .WithMany("Doctors")
                        .HasForeignKey("RegionId")
                        .IsRequired()
                        .HasConstraintName("FK__Doctor__RegionId__628FA481");

                    b.HasOne("SMCenterTestApp.DAL.Speciality", "Speciality")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialityId")
                        .IsRequired()
                        .HasConstraintName("FK__Doctor__Speciali__619B8048");

                    b.Navigation("Cabinet");

                    b.Navigation("Region");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("SMCenterTestApp.DAL.Patient", b =>
                {
                    b.HasOne("SMCenterTestApp.DAL.Region", "Region")
                        .WithMany("Patients")
                        .HasForeignKey("RegionId")
                        .IsRequired()
                        .HasConstraintName("FK__Patient__RegionI__5DCAEF64");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SMCenterTestApp.DTO.PatientDTO", b =>
                {
                    b.HasOne("SMCenterTestApp.DTO.RegionDTO", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SMCenterTestApp.DAL.Cabinet", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("SMCenterTestApp.DAL.Region", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("SMCenterTestApp.DAL.Speciality", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
